plugins {
    id "java"
}

clean {
    doFirst {
        println("delete " + layout.projectDirectory.dir("app"))
//        delete fileTree(layout.projectDirectory.dir("app")).include("**/*")
        delete layout.projectDirectory.dir("app")
    }
}

dependencies {
    implementation(project(":proxy-core"))

    runtimeOnly("org.apache.logging.log4j:log4j-slf4j2-impl")
}

tasks.register("build-app") {
    group = "Proxy"

    doLast {
        println("build " + project.name)

        Directory appFolder = layout.projectDirectory.dir("app").dir("maven-proxy")

        mkdir appFolder.dir("logs")

        copy {
            from layout.projectDirectory.dir("service").file("maven-proxy.sh")
            into appFolder.dir("bin")
        }

        copy {
            from configurations.runtimeClasspath
            into appFolder.dir("libs")
        }

        copy {
            from layout.projectDirectory.dir("src").dir("main").dir("resources")
            include "log4j2.xml"
            include "proxy-config.xml"
            into appFolder.dir("resources")
        }

//        def docsSpec = copySpec {
//            from(layout.projectDirectory.dir("docs"))
//            into("docs")
//        }
//
//        copy {
//            with(docsSpec)
//        }
    }
}

tasks.register("deploy-app") {
    group = "Proxy"

    doLast {
        println("deploy " + project.name)

        ant.lifecycleLogLevel = "INFO"

        Directory appFolder = layout.projectDirectory.dir("app").dir("maven-proxy")
        String remoteFolder = "/opt/jvmapps/maven-proxy"

        ant.sync(todir: remoteFolder + "/bin", overwrite: true, verbose: true) {
            fileset(dir: appFolder.dir("bin"))
        }

        ant.sync(todir: remoteFolder + "/libs", overwrite: true, verbose: true) {
            fileset(dir: appFolder.dir("libs"))
        }

        ant.sync(todir: remoteFolder + "/resources", overwrite: true, verbose: true) {
            fileset(dir: appFolder.dir("resources"))
        }

        ant.mkdir(dir: remoteFolder + "/logs")

        // Funktioniert nicht, wegen Fehler: "Could not find method from() for arguments ..."
//        sync {
//            from appFolder.dir("resources")
//            into remoteFolder + "/resources"
//            preserve {
//                include 'extraDir/**'
//                include 'dir1/**'
//                exclude 'dir1/extra.txt'
//            }
//        }
    }
}

//tasks.register("deleteAppFolder", Delete) {
//    description "Delete app-Folder."
//    group = "Maintenance"
//
//    logger.lifecycle "delete app-Folder: ${projectDir}/app"
//
//    delete fileTree("app") {
//        include "**/*.*"
//    }
//}
//clean.configure { finalizedBy deleteAppFolder }
