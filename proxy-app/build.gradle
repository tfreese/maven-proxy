buildscript {
    // For Plugins
    repositories {
        mavenLocal()
        mavenCentral()
//        gradlePluginPortal() // maven { url "https://plugins.gradle.org/m2"; name "plugins-gradle" }
    }
}

plugins {
    id "java"
    id "io.spring.dependency-management" version "$version_springDependencyManagement"
}

group = "de.freese.maven.proxy"
version = "0.0.1-SNAPSHOT"
description = "Proxy application project"

repositories {
    mavenLocal()
    mavenCentral()
}

test {
    useJUnitPlatform()
}

clean {
    doLast {
        println("delete " + layout.projectDirectory.dir("app"))
        delete layout.projectDirectory.dir("app")
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:$version_springBoot"
    }
}

dependencies {
    implementation("${group}:proxy-core:${version}")
//    implementation(project(":proxy-core"))

    runtimeOnly("org.apache.logging.log4j:log4j-slf4j2-impl")

    testImplementation("org.junit.jupiter:junit-jupiter")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

//    runtimeOnly("org.apache.logging.log4j:log4j-slf4j2-impl:2.20.0")
//
//    testImplementation("org.junit.jupiter:junit-jupiter:5.10.0")
//    testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.10.0")
}

tasks.register("build-app") {
    group = "Proxy"

    doLast {
        println("build " + project.name)

//        Provider<Directory> appFolder = layout.projectDirectory.dir("app")

        copy {
            from layout.projectDirectory.dir("service").file("maven-proxy.sh")
            into layout.projectDirectory.dir("app").dir("maven-proxy").dir("bin")
        }

        copy {
            from configurations.runtimeClasspath
            into layout.projectDirectory.dir("app").dir("maven-proxy").dir("libs")
        }

        copy {
            from layout.projectDirectory.dir("src").dir("main").dir("resources")
            include "log4j2.xml"
            include "proxy-config.xml"
            into layout.projectDirectory.dir("app").dir("maven-proxy").dir("resources")
        }
    }
}

tasks.register("deploy-app") {
    group = "Proxy"

    doLast {
        println("deploy " + project.name)

        ant.lifecycleLogLevel = "INFO"

//        Provider<Directory> localFolder = layout.projectDirectory.dir("app")
        String remoteFolder = "/opt/jvmapps/maven-proxy"

        ant.sync(todir: remoteFolder + "/bin", overwrite: true, verbose: true) {
            fileset(dir: layout.projectDirectory.dir("app").dir("maven-proxy").dir("bin"))
        }

        ant.sync(todir: remoteFolder + "/libs", overwrite: true, verbose: true) {
            fileset(dir: layout.projectDirectory.dir("app").dir("maven-proxy").dir("libs"))
        }

        ant.sync(todir: remoteFolder + "/resources", overwrite: true, verbose: true) {
            fileset(dir: layout.projectDirectory.dir("app").dir("maven-proxy").dir("resources"))
        }

        // Funktioniert nicht, wegen Fehler: "Could not find method from() for arguments ..."
//        sync {
//            from layout.projectDirectory.dir("app").dir("maven-proxy").dir("resources")
//            into remoteFolder + "/resources"
//            preserve {
//                include 'extraDir/**'
//                include 'dir1/**'
//                exclude 'dir1/extra.txt'
//            }
//        }
    }
}

//tasks.register("deleteAppFolder", Delete) {
//    description "Delete app-Folder."
//    group = "Maintenance"
//
//    logger.lifecycle "delete app-Folder: ${projectDir}/app"
//
//    delete fileTree("app") {
//        include "**/*.*"
//    }
//}
//clean.configure { finalizedBy deleteAppFolder }
